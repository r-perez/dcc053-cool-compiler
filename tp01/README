README file for Programming Assignment 2 (C++ edition)
=====================================================

Your directory should now contain the following files:

 Makefile        -> [course dir]/src/PA2/Makefile
 README
 cool.flex
 test.cl
 lextest.cc      -> [course dir]/src/PA2/lextest.cc
 mycoolc         -> [course dir]/src/PA2/mycoolc
 stringtab.cc    -> [course dir]/src/PA2/stringtab.cc
 utilities.cc    -> [course dir]/src/PA2/utilities.cc
 handle_flags.cc -> [course dir]/src/PA2/handle_flags.cc
 *.d             dependency files
 *.*             other generated files

The include (.h) files for this assignment can be found in 
[course dir]/include/PA2

	The Makefile contains targets for compiling and running your
	program. DO NOT MODIFY.

	The README contains this info. Part of the assignment is to fill
	the README with the write-up for your project. You should
	explain design decisions, explain why your code is correct, and
	why your test cases are adequate. It is part of the assignment
	to clearly and concisely explain things in text as well as to
	comment your code. Just edit this file.

	cool.flex is a skeleton file for the specification of the
	lexical analyzer. You should complete it with your regular
	expressions, patterns and actions. Information on how to do this
	is in the flex manual, which is part of your reader.

	test.cl is a COOL program that you can test the lexical
	analyzer on. It contains some errors, so it won't compile with
	coolc. However, test.cl does not exercise all lexical
	constructs of COOL and part of your assignment is to rewrite
	test.cl with a complete set of tests for your lexical analyzer.

	cool-parse.h contains definitions that are used by almost all parts
	of the compiler. DO NOT MODIFY.

	stringtab.{cc|h} and stringtab_functions.h contains functions
        to manipulate the string tables.  DO NOT MODIFY.

	utilities.{cc|h} contains functions used by the main() part of
	the lextest program. You may want to use the strdup() function
	defined in here. Remember that you should not print anything
	from inside cool.flex! DO NOT MODIFY.

	lextest.cc contains the main function which will call your
	lexer and print out the tokens that it returns.  DO NOT MODIFY.

	mycoolc is a shell script that glues together the phases of the
	compiler using Unix pipes instead of statically linking code.  
	While inefficient, this architecture makes it easy to mix and match
	the components you write with those of the course compiler.
	DO NOT MODIFY.	

        cool-lexer.cc is the scanner generated by flex from cool.flex.
        DO NOT MODIFY IT, as your changes will be overritten the next
        time you run flex.

 	The *.d files are automatically generated Makefiles that capture
 	dependencies between source and header files in this directory.
 	These files are updated automatically by Makefile; see the gmake
 	documentation for a detailed explanation.

Instructions
------------

	To compile your lextest program type:

	% gmake lexer

	Run your lexer by putting your test input in a file 'foo.cl' and
	run the lextest program:

	% ./lexer foo.cl

	To run your lexer on the file test.cl type:

	% gmake dotest

	If you think your lexical analyzer is correct and behaves like
	the one we wrote, you can actually try 'mycoolc' and see whether
	it runs and produces correct code for any examples.
	If your lexical analyzer behaves in an
	unexpected manner, you may get errors anywhere, i.e. during
	parsing, during semantic analysis, during code generation or
	only when you run the produced code on spim. So beware.

	To turnin your work type:

	% gmake submit-clean

	And run the "submit" program following the instructions on the
	course web page.
	
	Running "submit" will collect the files cool.flex, test.cl,
	README, and test.output. Don't forget to edit the README file to
	include your write-up, and to write your own test cases in
	test.cl.

 	You may turn in the assignment as many times as you like.
	However, only the last version will be retained for
	grading.

	If you change architectures you must issue

	% gmake clean

	when you switch from one type of machine to the other.
	If at some point you get weird errors from the linker,	
	you probably forgot this step.

	GOOD LUCK!

---8<------8<------8<------8<---cut here---8<------8<------8<------8<---

Write-up for PA2
----------------


A análise léxica inclui:

Espaço em branco

O espaço em branco consiste em qualquer seqüência de caracteres: em branco (ascii 32), `\n' (nova linha, ascii 10), `\f' (alimentação de formulário, ascii 12), `\r' (retorno de carruagem, ascii 13), `\t' (aba, ascii 9), `\v' (aba vertical, ascii 11).

Todos estes charaters são ignorados, exceto o charater da nova linha: `\n', que é necessário para a contagem dos números das linhas.

Comentários

Há duas formas de comentários em Cool. Quaisquer caracteres entre dois traços `--' e o final desta linha são tratados como comentários (assim como `//' em C). Os comentários também podem ser escritos anexando texto em `(*``...`*)` (assim como `/*` e `*/` em C). Esta última forma de comentário pode ser aninhada. Os comentários não podem cruzar os limites dos arquivos.

- Os comentários devem ser ignorados.
- Se um comentário permanece aberto quando EOF é encontrado, informe este erro com a mensagem "EOF em comentário".
- Se você ver `*)` fora de um comentário, informe este erro como "Unmatched \*)", em vez de assinalá-lo como `*` e `)`.

Operadores e Separadores

Retornar a si mesmo como um `char` se for um operador de um único carater ou Separador. Quanto aos outros com dois charaters, retornar o valor como é definido em 'cool-parse.h'.

Palavras-chave

As palavras-chave de cool são: "classe", "luva", "falso", "fi", "se", "em", "in", "heróis", "ovóide", "luva", "piscina", "entao", "enquanto", "caixa", "saco", "novo", "de", "não", "verdadeiro". Exceto pelas constantes "verdadeiro" e "falso", as palavras-chave são insensíveis a maiúsculas e minúsculas. Para estar de acordo com as regras para outros objetos, a primeira letra de "verdadeiro" e "falso" deve ser minúscula; as letras minúsculas podem ser maiúsculas ou minúsculas.

Cordas

O tipo `Char` é inválido no frio. Tanto um charater quanto um string devem ser definidos como "String". As cordas são incluídas entre aspas duplas `"`...`"`".

- Se uma EOF for encontrada antes da citação fechada, informe este erro como "EOF em string constant".
- Quando uma string é muito longa (exceder `MAX_STR_CONST`), informe este erro como "String constant too long".
- Você deve retornar um erro como "String contains null character" para uma string contendo
  o caráter literal nulo. Entretanto, a seqüência de dois caracteres ``0` é permitida, mas deve ser convertida para o único caractere ``0`, que representa o carater nulo.
- Seu scanner deve converter os caracteres de escape em constantes de seqüência de caracteres para seus valores corretos.
- Se uma cadeia de caracteres contém uma nova linha não contornada, informe esse erro como "Constante de cadeia não terminada" e retome a lexing no início da próxima linha.

Exemplo de uma expressão invlidada:

bash
//Inválido
str = "123
456";


A expressão válida deve ser a seguinte:

bash
//Válido
str = "123\n456";


Isto também é válido:

bash
//Válido
str = "123\\
456";


Inteiros

Os inteiros são cordões não vazios de dígitos 0-9.

#Identificadores

Os identificadores são cordas (exceto palavras-chave) que consistem de letras, dígitos e o caractere sublinhado. Os identificadores de tipo começam com uma letra maiúscula; os identificadores de objeto começam com uma letra minúscula. Há dois outros identificadores, `self` e `SELF_TYPE` que são tratados especialmente por Cool, mas não são tratados como palavras-chave.

Outros

Basta devolver um erro com esta ficha.

TODO: coisas a implementar
tirar 3 coisas
